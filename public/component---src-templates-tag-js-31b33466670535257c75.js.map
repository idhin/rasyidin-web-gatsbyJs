{"version":3,"file":"component---src-templates-tag-js-31b33466670535257c75.js","mappings":"+NAOqBA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,MAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,UA0DlB,OA1DkBA,EACnBC,YAAA,WAcE,OAbsBC,KAAKC,MAAnBC,UACmBC,KAAI,SAAAC,GAC7B,MAAO,CACLC,KAAMD,EAASE,KAAKC,OAAOC,KAC3BC,KAAML,EAASE,KAAKI,YAAYD,KAChCE,UAAWP,EAASE,KAAKI,YAAYC,UACrCC,MAAOR,EAASE,KAAKI,YAAYE,MACjCC,KAAMT,EAASE,KAAKC,OAAOM,KAC3BC,QAASV,EAASE,KAAKQ,QACvBC,WAAYX,EAASE,KAAKS,WAC1BC,WAAYZ,EAASE,KAAKI,YAAYM,gBAI3C,EAEDC,OAAA,WACE,IAAQC,EAAWlB,KAAKC,MAAhBiB,OACFC,EAAWnB,KAAKD,cAEtB,OACE,2BAASqB,UAAS,UAAWF,EAAS,SAAW,KAC9CC,EAAShB,KAAI,SAAAkB,GACZ,IAAIV,EACAU,EAAKV,YACPA,EAAYU,EAAKV,UAAUW,gBAAgBC,OAG7C,IAAMC,EAAUH,EAAKL,WAAWS,SAAS,WACnCZ,GAAOa,EAAAA,EAAAA,GAAWL,EAAKR,MACvBc,EAASC,GAAAA,CAAOP,EAAKR,MAAQe,GAAAA,GAASC,SAAS,EAAG,UAExD,OACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIV,EAAKhB,KAAM2B,IAAKX,EAAKT,OAC7B,uBAAKQ,UAAU,QACZT,EAAY,gBAAC,IAAD,CAAKY,MAAOZ,IAAgB,4BACzC,uBAAKS,UAAU,kBACb,0BAAKC,EAAKT,QACRM,GAAU,uBAAKE,UAAU,YAAYP,IAExCc,GACC,uBAAKP,UAAU,SACb,uBAAKA,UAAU,OAAf,SAGHI,IAAYN,IAAWS,GACtB,uBAAKP,UAAU,SACb,uBAAKA,UAAU,WAAf,mBASjB,EA1DkBtB,CAAoBmC,EAAAA,Y,2ICApBC,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KAmBlB,OAnBkBA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACnBjB,OAAA,WACE,IAAQkB,EAAQnC,KAAKC,MAAMmC,YAAnBD,IACFjC,EAAYF,KAAKC,MAAMoC,KAAKC,kBAAkBC,MAEpD,OACE,gBAAC,IAAD,KACE,gBAAC,KAAD,CAAQ3B,MAAK,oBAAsBuB,EAAtB,OAAgCK,IAAAA,YAC7C,uBAAKpB,UAAU,aACb,4CACkB,IAChB,yBACE,8BAASe,KAGb,gBAAC,IAAD,CAAajC,UAAWA,OAI/B,EAnBkBgC,CAAoBD,EAAAA","sources":["webpack://codesbandit.com/./src/components/PostListing.js","webpack://codesbandit.com/./src/templates/tag.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport moment from 'moment'\n\nimport { formatDate } from '../utils/global'\n\nexport default class PostListing extends Component {\n  getPostList() {\n    const { postEdges } = this.props\n    const postList = postEdges.map(postEdge => {\n      return {\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        thumbnail: postEdge.node.frontmatter.thumbnail,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        categories: postEdge.node.frontmatter.categories,\n      }\n    })\n    return postList\n  }\n\n  render() {\n    const { simple } = this.props\n    const postList = this.getPostList()\n\n    return (\n      <section className={`posts ${simple ? 'simple' : ''}`}>\n        {postList.map(post => {\n          let thumbnail\n          if (post.thumbnail) {\n            thumbnail = post.thumbnail.childImageSharp.fixed\n          }\n\n          const popular = post.categories.includes('Popular')\n          const date = formatDate(post.date)\n          const newest = moment(post.date) > moment().subtract(1, 'months')\n\n          return (\n            <Link to={post.path} key={post.title}>\n              <div className=\"each\">\n                {thumbnail ? <Img fixed={thumbnail} /> : <div />}\n                <div className=\"each-list-item\">\n                  <h2>{post.title}</h2>\n                  {!simple && <div className=\"datetime\">{date}</div>}\n                </div>\n                {newest && (\n                  <div className=\"alert\">\n                    <div className=\"new\">New!</div>\n                  </div>\n                )}\n                {popular && !simple && !newest && (\n                  <div className=\"alert\">\n                    <div className=\"popular\">Popular</div>\n                  </div>\n                )}\n              </div>\n            </Link>\n          )\n        })}\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport config from '../../data/SiteConfig'\n\nexport default class TagTemplate extends Component {\n  render() {\n    const { tag } = this.props.pageContext\n    const postEdges = this.props.data.allMarkdownRemark.edges\n\n    return (\n      <Layout>\n        <Helmet title={`Posts tagged as \"${tag}\" â€“ ${config.siteTitle}`} />\n        <div className=\"container\">\n          <h1>\n            Posts tagged as{' '}\n            <u>\n              <strong>{tag}</strong>\n            </u>\n          </h1>\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            categories\n            thumbnail {\n              childImageSharp {\n                fixed(width: 150, height: 150) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n            date\n            template\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostListing","getPostList","this","props","postEdges","map","postEdge","path","node","fields","slug","tags","frontmatter","thumbnail","title","date","excerpt","timeToRead","categories","render","simple","postList","className","post","childImageSharp","fixed","popular","includes","formatDate","newest","moment","subtract","Link","to","key","Component","TagTemplate","tag","pageContext","data","allMarkdownRemark","edges","config"],"sourceRoot":""}