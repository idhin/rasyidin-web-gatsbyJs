{"version":3,"file":"component---src-templates-page-js-9292b69f7a9762725347.js","mappings":"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","sources":["webpack://codesbandit.com/./node_modules/url-join/lib/url-join.js","webpack://codesbandit.com/./src/components/SEO.js","webpack://codesbandit.com/./src/templates/page.js"],"sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\n\nexport default class SEO extends Component {\n  render() {\n    const replacePath = path => (path === `/` ? path : path.replace(/\\/$/, ``));\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image = ''\n    let postURL\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      title = postMeta.title\n      description = postMeta.description ? postMeta.description : postNode.excerpt\n      if (postMeta.thumbnail) {\n        image = postMeta.thumbnail.childImageSharp.fixed.src\n      }\n      postURL = urljoin(config.siteUrl, replacePath(postPath))\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n\n    image = urljoin(config.siteUrl, image)\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n      },\n    ]\n\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image,\n          },\n          description,\n        }\n      )\n    }\n    return (\n      <Helmet>\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        <script type=\"application/ld+json\">{JSON.stringify(schemaOrgJSONLD)}</script>\n\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO && <meta property=\"og:type\" content=\"article\" />}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:creator\" content={config.userTwitter} />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\n\nexport default class PageTemplate extends Component {\n  render() {\n    const { slug } = this.props.pageContext\n    const postNode = this.props.data.markdownRemark\n    const page = postNode.frontmatter\n\n    if (!page.id) {\n      page.id = slug\n    }\n\n    return (\n      <Layout>\n        <Helmet>\n          <title>{`${page.title} â€“ ${config.siteTitle}`}</title>\n        </Helmet>\n        <SEO postPath={slug} postNode={postNode} postSEO />\n        <div className=\"container\">\n          <article>\n            <header className=\"page-header\">\n              <h1>{page.title}</h1>\n            </header>\n            <div className=\"page\" dangerouslySetInnerHTML={{ __html: postNode.html }} />\n          </article>\n        </div>\n      </Layout>\n    )\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query PageBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        template\n      }\n      fields {\n        slug\n        date\n      }\n    }\n  }\n`\n"],"names":["normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","SEO","render","title","description","postURL","path","this","props","postNode","postPath","postSEO","image","postMeta","frontmatter","excerpt","thumbnail","childImageSharp","fixed","src","urljoin","config","blogURL","schemaOrgJSONLD","url","name","alternateName","itemListElement","position","item","headline","content","type","JSON","stringify","property","Component","PageTemplate","slug","pageContext","data","markdownRemark","page","id","className","dangerouslySetInnerHTML","__html","html"],"sourceRoot":""}